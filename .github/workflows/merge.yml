name: Build and Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
  workflow_dispatch: # This allows you to manually trigger the workflow

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  vars:
    name: Set Variables
    outputs:
      pr: ${{ steps.pr.outputs.pr }}
    runs-on: ubuntu-22.04
    timeout-minutes: 1
    steps:
      # Get PR number for squash merges to main
      - name: PR Number
        id: pr
        uses: bcgov-nr/action-get-pr@v0.0.1
        
  build:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      pr-number-output: ${{ steps.set-output.outputs.pr-number }}
      short-commit-hash: ${{ steps.extract-commit-hash.outputs.short-git-sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get current main sha
        run: echo "PR_NUMBER=$(gh api /repos/zimimi/simple-python-flask/commits/${{ github.sha }}/pulls | jq -r '.[0].head.sha')" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Print current main sha
        run: echo "${{ env.PR_NUMBER }}"
        
      - name: Check if branch is up to date with main
        run: |
          if git merge-base --is-ancestor origin/main ${{ env.PR_NUMBER }}; then
            echo "This branch is up to date with main. Procced"
            echo "Commit hash ${{ github.sha }}"
            echo "HEAD SHA: $(git rev-parse HEAD)"
          else
            echo "This branch is not up to date with main. Need to update."
            echo "Commit hash ${{ github.sha }}"
            echo "HEAD SHA: $(git rev-parse HEAD)"
            exit 1
          fi
        
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2
        
      # - name: Extract Git commit hash
      #   id: extract-commit-hash
      #   run: echo "short-git-sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # - name: Set PR number
      #   id: set-pr-number
      #   run: echo "pr-number=${{ github.event.number }}" >> $GITHUB_OUTPUT

      # - name: Login to Artifactory image registry with Docker
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ secrets.ARTIFACTORY_URL }}
      #     username: ${{ secrets.ARTIFACTORY_SERVICEACCOUNT_USERNAME }}
      #     password: ${{ secrets.ARTIFACTORY_SERVICEACCOUNT_PASSWORD }}
          
      # - name: Print Short commit hash
      #   run: echo "${{ steps.extract-commit-hash.outputs.short-git-sha }}"
        
      # - name: Print PR number
      #   run: echo "${{ steps.set-pr-number.outputs.pr-number }}"

      # - name: Print test var
      #   run: echo "${{ vars.TEST_VAR }}"

      # - name: Print all git envs
      #   run: env

      # - name: Print custom PR number
      #   run: |
      #     pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
      #     echo $pull_number

      # - name: Get PR from API
      #   run: echo "PR_NUMBER=$(gh api /repos/zimimi/simple-python-flask/commits/${{ github.sha }}/pulls | jq -r '.[0].number')" >> $GITHUB_ENV
      #   env:
      #     GH_TOKEN: ${{ github.token }}

      # - name: Print PR number
      #   run: echo "${{ env.PR_NUMBER }}"

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [vars, build]
  #   steps:
  #     - name: Print image tag
  #       run: echo "${{ needs.vars.outputs.pr }}"
  #     - name: Print Git commit hash
  #       run: echo "${{ needs.build.outputs.commit-hash }}"
  #     - name: Print Github output
  #       run: echo "$GITHUB_OUTPUT"
  #     - name: Print Github env
  #       run: echo "$GITHUB_ENV"
