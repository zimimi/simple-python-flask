name: Build and Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
  workflow_dispatch: # This allows you to manually trigger the workflow

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  vars:
    name: Set Variables
    outputs:
      pr: ${{ steps.pr.outputs.pr }}
    runs-on: ubuntu-22.04
    timeout-minutes: 1
    steps:
      # Get PR number for squash merges to main
      - name: PR Number
        id: pr
        uses: bcgov-nr/action-get-pr@v0.0.1
        
  build:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract Git commit hash
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Download outputs from Artifactory
        run: |
          curl -v -O \
            --user ${{ secrets.ARTIFACTORY_SERVICEACCOUNT_USERNAME }}:${{ secrets.ARTIFACTORY_SERVICEACCOUNT_PASSWORD }} \
            https://${{ secrets.ARTIFACTORY_URL }}/artifactory/${{ secrets.ARTIFACTORY_REPOSITORY_NAME }}/outputs.txt

      - name: Read and use outputs
        run: |
          if [ -f "./outputs.txt" ]; then
            OUTPUT_SHA=$(cat outputs.txt)
            echo "OUTPUT_SHA=$OUTPUT_SHA" >> $GITHUB_ENV
          else
            echo "No outputs found."
            exit 1
          fi

      - name: Login to Artifactory image registry with Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ARTIFACTORY_URL }}
          username: ${{ secrets.ARTIFACTORY_SERVICEACCOUNT_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_SERVICEACCOUNT_PASSWORD }}

      - name: Compare Git SHAs and retag Docker image if different
        run: |
          if [ "${{ env.GIT_SHA }}" != "${{ env.OUTPUT_SHA }}" ]; then
            echo "SHA mismatch: Retagging Docker image."
            echo "Output Sha = ${{ env.OUTPUT_SHA }}, Git Sha = ${{ env.GIT_SHA }}"
            # Optionally, push the retagged image to a registry
            # docker push myimage:${{ env.GIT_SHA }}
          else
            echo "SHAs match: No action needed."
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: [vars, build]
    steps:
      - name: Print image tag
        run: echo "${{ needs.vars.outputs.pr }}"
      - name: Print Git commit hash
        run: echo "${{ needs.build.outputs.commit-hash }}"
      - name: Print Github output
        run: echo "$GITHUB_OUTPUT"
      - name: Print Github env
        run: echo "$GITHUB_ENV"
